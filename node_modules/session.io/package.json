{
  "name": "session.io",
  "version": "1.0.0",
  "description": "Gets session data for socket.io",
  "main": "session.io.js",
  "scripts": [
    null
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:AustP/session.io.git"
  },
  "keywords": [
    "socket.io",
    "sessions",
    "session",
    "data"
  ],
  "author": {
    "name": "AustP"
  },
  "license": "MIT",
  "readme": "#session.io\n<hr>\n###Introduction\nBack when <a href=\"http://expressjs.com\">Express</a> was in version 2, we had access to our \n<a href=\"http://www.danielbaulig.de/socket-ioexpress/\">session data</a> in socket.io. But when Express upgraded to \nversion 3, our session data was cut off. After scrambling from module to module trying to restore session data in \nsocket.io, I decided to bring it back to the way it was.\n\nI had been using <a href=\"https://github.com/functioncallback/session.socket.io\">session.socket.io</a> with quite\na bit of success. The problem with this module and many others is that when getting session data, the call is \nasynchronous. This caused problems when trying to get session data for other sockets besides the one that was\ncurrently being used. i.e. `io.sockets.forEach(function(_socket){...});`\n\nSo I needed to get session data during authorization like I was doing previously. I wrote my piece of code basing it\noff of session.socket.io. Because it was such a re-write I just decided to create a new module for it. After writing\nmy module I found <a href=\"https://github.com/tcr/socket.io-session/\">socket.io-session</a>. I looked at their code\nand saw some things that I liked in it and adapted it to my code (i.e. allowing a callback to continue authorization).\n\n##Quick Start\n###Installation\n\n    npm install session.io\n    \n###Setup\nThis script is under <a href=\"https://github.com/AustP/session.io/blob/master/examples/test.js\">/examples/test.js</a>\nif you want to test it.\n\n    var express = require('express');\n    var app = express();\n    var server = require('http').createServer(app);\n    \n    //Setup cookie and session handlers\n    //Note: for sessionStore you can use any sessionStore module that has the .load() function\n    //but I personally use the module 'sessionstore' to handle my sessionStores.\n    var cookieParser = express.cookieParser('secret');\n    var sessionStore = require('sessionstore').createSessionStore();\n    \n    app.configure(function(){\n      app.set('port', process.env.PORT || 3000);\n      //...truncate...//\n      app.use(cookieParser);\n      //make sure to use the same secret as you specified in your cookieParser\n      app.use(express.session({secret: 'secret', store: sessionStore}));\n      app.use(app.router);\n    });\n    \n    app.get('/', function(req, res){\n      res.send('<script src=\"/socket.io/socket.io.js\"></script><script>io.connect();</script>Connected');\n    });\n    \n    server.listen(app.get('port'), function(){\n      console.log('Listening on port ' + app.get('port'));\n    });\n    \n    var io = require('socket.io').listen(server);\n    \n    io.configure(function(){\n      //use session.io to get our session data\n      io.set('authorization', require('session.io')(cookieParser, sessionStore));\n    });\n    \n    io.on('connection', function(socket){\n      //we now have access to our session data like so\n      var session = socket.handshake.session;\n      console.log(session);\n    });\n    \n##Specifics\nWhen you call `require('session.io')`, it returns a function. You may be thinking, \"So what exactly can I pass to the \n`session.io` function?\" Well, let me tell you. When you call that function, it takes the following parameters:\n\n- cookieParser :: required - instance of `express.cookieParser()`\n- sessionStore :: required - instance of any sessionStore module that has the `.load()` function\n- key :: optional - the key used in `express.session()` if you set one\n- fn :: optional - function to call to handle any additional authorization you may want to do - session will be set here\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/AustP/session.io/issues"
  },
  "homepage": "https://github.com/AustP/session.io",
  "_id": "session.io@1.0.0",
  "dist": {
    "shasum": "1a0b912c1607e737a5a4334e409efae5a3e543c0"
  },
  "_from": "session.io@",
  "_resolved": "https://registry.npmjs.org/session.io/-/session.io-1.0.0.tgz"
}
